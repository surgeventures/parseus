# basic params

params = %{
  "session_id" => "123",
  "email" => "a@b.c",
  "password" => "mypassword",
}

parser =
  params
  |> cast(~w{session_id email password})
  |> rename_key(:session_id, :id)
  |> parse_integer(:id)
  |> validate_required(:id)
  |> validate_number(:id, greater_than: 0)
  |> validate_format(:email, "x@y.z")
  |> validate_length(:password, min: 8)
  |> flatten

case parser do
  parser = %Parser{output: {id, email, password}} ->
    case action(id, email, password) do
      {:ok, output} ->
        render(something: output)
      {:error, :email_taken} ->
        put_error(parser, :email, "taken")
    end
  _ ->
    parser
end

# non-standard params

params = %{
  "category-ids" => "1,2,3",
  "center" => "50.0,20.0",
  "box-ne" => "52.0,22.0",
  "box-sw" => "51.0,21.0",
  "include" => "locations",
}

params
|> cast(~w{category-ids center box_ne box_sw include})
|> validate_required(:category_ids)
|> parse(:category_ids, IdListParser.call/1)
|> validate_required(:center)
|> parse(:center, GeolocationParser)
|> transform(fn params -> Map.put(:box, Map.pop(:box_ne, :box_sw, &"#{&1},#{&2}")) end)
|> parse(:box, GeoboxParser)
|> parse(:include, IncludeParser)
|> validate(:include, &include_validator/1)
|> transform(fn params -> Map.put(:include_location, :location in params[:include]))
|> validate(&center_or_box_validator/1)

# nested structures

doc = %{
  data: %{
    type: "sessions",
    id: "123",
    attributes: %{
      "email" => "a@b.c",
      "password" => "mypassword",
    },
    relationships: %{
      "user" => %{
        data: %{
          attributes: %{
            "name" => "John Smith",
          },
          relationships: %{
            "images" => %{
              data: [
                %{
                  type: "image",
                  id: "456",
                },
                %{
                  type: "image",
                  id: "457",
                }
              ]
            }
          }
        }
      }
    }
  }
}

doc
|> dig_in([:data])
|> cast(~w{id type}a)
|> validate_number(:id, greater_than: 0)
|> validate_inclusion(:type, "sessions")
|> drop(:type)
|> dig_in([:data, :attributes])
|> cast(~w{email password})
|> validate_format(:email, "x@y.z")
|> validate_length(:password, min: 8)
|> dig_in([:data, :relationships, "user", :attributes])
|> cast(~w{name}a)
|> dig_all([:data, :relationships, "user", :relationships, "images", :data], :images)
|> cast(~w{id type})
|> validate_number(:id, greater_than: 0)
|> validate_inclusion(:type, "images")
|> drop(:type)

parse doc,
  dig_in: [:data],
    cast: ~w{id type}a,
    validate_number: {:id, greater_than: 0},
    validate_inclusion: {:type, "sessions"},
    drop: :type,
  dig_in: [:data, :attributes],
    cast: ~w{email password},
    validate_format: {:email, "x@y.z"},
    validate_length: {:password, min: 8},
  dig_in: [:data, :relationships, "user", :attributes],
    cast: ~a{name},
  dig_all: {[:data, :relationships, "user", :relationships, "images", :data], :images},
    cast: ~w{id type},
    validate_number: {:id, greater_than: 0},
    validate_inclusion: {:type, ~w{images}},
    drop: :type

doc
|> from(:data, fn input ->
     input
     |> cast(~w{id type}a)
     |> validate_number(:id, greater_than: 0)
     |> validate_inclusion(:type, ["sessions"])
     |> drop(:type)
     |> from(:attributes, fn input ->
          input
          |> cast(~w{email password})
          |> validate_format(:email, "x@y.z")
          |> validate_length(:password, min: 8)
        end)
   end)
|> from([:data, :relationships, "user", :attributes], fn input ->
     input
     |> cast(~w{name}a)
   end)
|> from_many([:data, :relationships, "user", :relationships, "images", :data], :images, fn input ->
     input
     |> cast(~w{id type})
     |> validate_number(:id, greater_than: 0)
     |> validate_inclusion(:type, "images")
     |> drop(:type)
   end)
